.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::mysqld 3pm"
.TH Test::mysqld 3pm "2023-02-16" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::mysqld \- mysqld runner for tests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use DBI;
\&  use Test::mysqld;
\&  use Test::More;
\&  
\&  my $mysqld = Test::mysqld\->new(
\&    my_cnf => {
\&      \*(Aqskip\-networking\*(Aq => \*(Aq\*(Aq, # no TCP socket
\&    }
\&  ) or plan skip_all => $Test::mysqld::errstr;
\&  
\&  plan tests => XXX;
\&  
\&  my $dbh = DBI\->connect(
\&    $mysqld\->dsn(dbname => \*(Aqtest\*(Aq),
\&  );
\&  
\&  # start_mysqlds is faster than calling Test::mysqld\->new twice
\&  my @mysqlds = Test::mysqld\->start_mysqlds(
\&    2,
\&    my_cnf => {
\&      \*(Aqskip\-networking\*(Aq => \*(Aq\*(Aq, # no TCP socket
\&    }
\&  ) or plan skip_all => $Test::mysqld::errstr;
\&  Test::mysqlds\->stop_mysqlds(@mysqlds);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Test::mysqld\*(C'\fR automatically setups a mysqld instance in a temporary directory, and destroys it when the perl script exits.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
Create and run a mysqld instance.  The instance is terminated when the returned object is being DESTROYed.  If required programs (mysql_install_db and mysqld) were not found, the function returns undef and sets appropriate message to \f(CW$Test::mysqld::errstr\fR.
.SS "base_dir"
.IX Subsection "base_dir"
Returns directory under which the mysqld instance is being created.  The property can be set as a parameter of the \f(CW\*(C`new\*(C'\fR function, in which case the directory will not be removed at exit.
.SS "copy_data_from"
.IX Subsection "copy_data_from"
If specified, uses a copy of the specified directory as the data directory of MySQL.  \*(L"Mysql\*(R" database (which is used to store administrative information) is automatically created if necessary by invoking mysql_install_db.
.SS "my_cnf"
.IX Subsection "my_cnf"
A hash containing the list of name=value pairs to be written into my.cnf.  The property can be set as a parameter of the \f(CW\*(C`new\*(C'\fR function.
.SS "mysql_install_db"
.IX Subsection "mysql_install_db"
.SS "mysqld"
.IX Subsection "mysqld"
Path to \f(CW\*(C`mysql_install_db\*(C'\fR script or \f(CW\*(C`mysqld\*(C'\fR program bundled to the mysqld distribution.  If not set, the program is automatically search by looking up \f(CW$PATH\fR and other prefixed directories.
.SS "dsn"
.IX Subsection "dsn"
Builds and returns dsn by using given parameters (if any).  Default username is 'root', and dbname is 'test'.
.SS "pid"
.IX Subsection "pid"
Returns process id of mysqld (or undef if not running).
.SS "start"
.IX Subsection "start"
Starts mysqld.
.SS "stop"
.IX Subsection "stop"
Stops mysqld.
.SS "setup"
.IX Subsection "setup"
Setups the mysqld instance.
.SS "read_log"
.IX Subsection "read_log"
Returns the contents of the mysqld log file.
.SS "start_mysqlds"
.IX Subsection "start_mysqlds"
Create and run some mysqld instances, and return a list of \f(CW\*(C`Test::mysqld\*(C'\fR.
.SS "stop_mysqlds"
.IX Subsection "stop_mysqlds"
Stop some mysqld instances.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2009 Cybozu Labs, Inc.  Written by Kazuho Oku.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
